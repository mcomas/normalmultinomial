// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ilr_basis
arma::mat ilr_basis(unsigned int dim);
RcppExport SEXP normalmultinomial_ilr_basis(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned int >::type dim(dimSEXP);
    __result = Rcpp::wrap(ilr_basis(dim));
    return __result;
END_RCPP
}
// ilr_basis_simplex
arma::mat ilr_basis_simplex(unsigned int dim);
RcppExport SEXP normalmultinomial_ilr_basis_simplex(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned int >::type dim(dimSEXP);
    __result = Rcpp::wrap(ilr_basis_simplex(dim));
    return __result;
END_RCPP
}
// ilr_to_alr
arma::mat ilr_to_alr(unsigned int dim);
RcppExport SEXP normalmultinomial_ilr_to_alr(SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned int >::type dim(dimSEXP);
    __result = Rcpp::wrap(ilr_to_alr(dim));
    return __result;
END_RCPP
}
// clr_coordinates
arma::mat clr_coordinates(arma::mat X);
RcppExport SEXP normalmultinomial_clr_coordinates(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    __result = Rcpp::wrap(clr_coordinates(X));
    return __result;
END_RCPP
}
// inv_clr_coordinates
arma::mat inv_clr_coordinates(arma::mat clrX);
RcppExport SEXP normalmultinomial_inv_clr_coordinates(SEXP clrXSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type clrX(clrXSEXP);
    __result = Rcpp::wrap(inv_clr_coordinates(clrX));
    return __result;
END_RCPP
}
// ilr_coordinates
arma::mat ilr_coordinates(arma::mat X);
RcppExport SEXP normalmultinomial_ilr_coordinates(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    __result = Rcpp::wrap(ilr_coordinates(X));
    return __result;
END_RCPP
}
// inv_ilr_coordinates
arma::mat inv_ilr_coordinates(arma::mat ilrX);
RcppExport SEXP normalmultinomial_inv_ilr_coordinates(SEXP ilrXSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type ilrX(ilrXSEXP);
    __result = Rcpp::wrap(inv_ilr_coordinates(ilrX));
    return __result;
END_RCPP
}
// ilr_coordinates_with_basis
arma::mat ilr_coordinates_with_basis(arma::mat X, arma::mat B);
RcppExport SEXP normalmultinomial_ilr_coordinates_with_basis(SEXP XSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    __result = Rcpp::wrap(ilr_coordinates_with_basis(X, B));
    return __result;
END_RCPP
}
// mvf
double mvf(arma::vec a, arma::vec mu, arma::mat inv_sigma, arma::vec x);
RcppExport SEXP normalmultinomial_mvf(SEXP aSEXP, SEXP muSEXP, SEXP inv_sigmaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inv_sigma(inv_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    __result = Rcpp::wrap(mvf(a, mu, inv_sigma, x));
    return __result;
END_RCPP
}
// mvf_deriv
double mvf_deriv(int I, arma::vec a, arma::vec mu, arma::mat inv_sigma, arma::vec x);
RcppExport SEXP normalmultinomial_mvf_deriv(SEXP ISEXP, SEXP aSEXP, SEXP muSEXP, SEXP inv_sigmaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inv_sigma(inv_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    __result = Rcpp::wrap(mvf_deriv(I, a, mu, inv_sigma, x));
    return __result;
END_RCPP
}
// mvf_deriv2
double mvf_deriv2(int I, int J, arma::vec a, arma::vec mu, arma::mat inv_sigma, arma::vec x);
RcppExport SEXP normalmultinomial_mvf_deriv2(SEXP ISEXP, SEXP JSEXP, SEXP aSEXP, SEXP muSEXP, SEXP inv_sigmaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inv_sigma(inv_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    __result = Rcpp::wrap(mvf_deriv2(I, J, a, mu, inv_sigma, x));
    return __result;
END_RCPP
}
// logLike
double logLike(arma::mat X, arma::mat A, arma::vec mu, arma::mat inv_sigma);
RcppExport SEXP normalmultinomial_logLike(SEXP XSEXP, SEXP ASEXP, SEXP muSEXP, SEXP inv_sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inv_sigma(inv_sigmaSEXP);
    __result = Rcpp::wrap(logLike(X, A, mu, inv_sigma));
    return __result;
END_RCPP
}
// hessian
arma::mat hessian(arma::vec a, arma::vec mu, arma::mat inv_sigma, arma::vec x);
RcppExport SEXP normalmultinomial_hessian(SEXP aSEXP, SEXP muSEXP, SEXP inv_sigmaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inv_sigma(inv_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    __result = Rcpp::wrap(hessian(a, mu, inv_sigma, x));
    return __result;
END_RCPP
}
// mvf_maximum
arma::vec mvf_maximum(arma::vec x, arma::vec mu, arma::mat inv_sigma, double eps, int max_iter, double prop);
RcppExport SEXP normalmultinomial_mvf_maximum(SEXP xSEXP, SEXP muSEXP, SEXP inv_sigmaSEXP, SEXP epsSEXP, SEXP max_iterSEXP, SEXP propSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inv_sigma(inv_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type prop(propSEXP);
    __result = Rcpp::wrap(mvf_maximum(x, mu, inv_sigma, eps, max_iter, prop));
    return __result;
END_RCPP
}
// c_rnormal
arma::mat c_rnormal(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP normalmultinomial_c_rnormal(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(c_rnormal(n, mu, sigma));
    return __result;
END_RCPP
}
// c_rmultinomial
arma::mat c_rmultinomial(arma::mat A, arma::vec size, int seed);
RcppExport SEXP normalmultinomial_c_rmultinomial(SEXP ASEXP, SEXP sizeSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    __result = Rcpp::wrap(c_rmultinomial(A, size, seed));
    return __result;
END_RCPP
}
// c_rnormalmultinomial
List c_rnormalmultinomial(arma::vec mu, arma::mat sigma, arma::vec size, int seed);
RcppExport SEXP normalmultinomial_c_rnormalmultinomial(SEXP muSEXP, SEXP sigmaSEXP, SEXP sizeSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    __result = Rcpp::wrap(c_rnormalmultinomial(mu, sigma, size, seed));
    return __result;
END_RCPP
}
// expectedMetropolis
Rcpp::List expectedMetropolis(arma::vec x, arma::vec mu_ilr, arma::mat sigma_ilr, int nsim);
RcppExport SEXP normalmultinomial_expectedMetropolis(SEXP xSEXP, SEXP mu_ilrSEXP, SEXP sigma_ilrSEXP, SEXP nsimSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_ilr(mu_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_ilr(sigma_ilrSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    __result = Rcpp::wrap(expectedMetropolis(x, mu_ilr, sigma_ilr, nsim));
    return __result;
END_RCPP
}
// expectedMoment1_alr
Rcpp::List expectedMoment1_alr(arma::vec x, arma::vec mu, arma::mat sigma, arma::mat Z);
RcppExport SEXP normalmultinomial_expectedMoment1_alr(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    __result = Rcpp::wrap(expectedMoment1_alr(x, mu, sigma, Z));
    return __result;
END_RCPP
}
// expectedMoment1
Rcpp::List expectedMoment1(arma::vec x, arma::vec mu_ilr, arma::mat sigma_ilr, arma::mat Z);
RcppExport SEXP normalmultinomial_expectedMoment1(SEXP xSEXP, SEXP mu_ilrSEXP, SEXP sigma_ilrSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_ilr(mu_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_ilr(sigma_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    __result = Rcpp::wrap(expectedMoment1(x, mu_ilr, sigma_ilr, Z));
    return __result;
END_RCPP
}
// expectedMoment2spherical
Rcpp::List expectedMoment2spherical(arma::vec x, arma::vec mu_ilr, arma::mat sigma_ilr, arma::mat Z);
RcppExport SEXP normalmultinomial_expectedMoment2spherical(SEXP xSEXP, SEXP mu_ilrSEXP, SEXP sigma_ilrSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_ilr(mu_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_ilr(sigma_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    __result = Rcpp::wrap(expectedMoment2spherical(x, mu_ilr, sigma_ilr, Z));
    return __result;
END_RCPP
}
// expectedMoment2
Rcpp::List expectedMoment2(arma::vec x, arma::vec mu_ilr, arma::mat sigma_ilr, arma::mat Z);
RcppExport SEXP normalmultinomial_expectedMoment2(SEXP xSEXP, SEXP mu_ilrSEXP, SEXP sigma_ilrSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_ilr(mu_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_ilr(sigma_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    __result = Rcpp::wrap(expectedMoment2(x, mu_ilr, sigma_ilr, Z));
    return __result;
END_RCPP
}
// expectedMonteCarlo
Rcpp::List expectedMonteCarlo(arma::vec x, arma::vec mu_ilr, arma::mat sigma_ilr, arma::mat Z);
RcppExport SEXP normalmultinomial_expectedMonteCarlo(SEXP xSEXP, SEXP mu_ilrSEXP, SEXP sigma_ilrSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_ilr(mu_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_ilr(sigma_ilrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    __result = Rcpp::wrap(expectedMonteCarlo(x, mu_ilr, sigma_ilr, Z));
    return __result;
END_RCPP
}
