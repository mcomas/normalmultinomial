// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rnormal
arma::mat rnormal(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP normalmultinomial_rnormal(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(rnormal(n, mu, sigma));
    return __result;
END_RCPP
}
// rmultinomial
arma::mat rmultinomial(arma::mat A, arma::vec size);
RcppExport SEXP normalmultinomial_rmultinomial(SEXP ASEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type size(sizeSEXP);
    __result = Rcpp::wrap(rmultinomial(A, size));
    return __result;
END_RCPP
}
// rnormalmultinomial
arma::mat rnormalmultinomial(arma::vec mu, arma::mat sigma, arma::vec size);
RcppExport SEXP normalmultinomial_rnormalmultinomial(SEXP muSEXP, SEXP sigmaSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type size(sizeSEXP);
    __result = Rcpp::wrap(rnormalmultinomial(mu, sigma, size));
    return __result;
END_RCPP
}
// logLike
double logLike(arma::mat X, arma::mat A, arma::vec mu, arma::mat inv_sigma);
RcppExport SEXP normalmultinomial_logLike(SEXP XSEXP, SEXP ASEXP, SEXP muSEXP, SEXP inv_sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inv_sigma(inv_sigmaSEXP);
    __result = Rcpp::wrap(logLike(X, A, mu, inv_sigma));
    return __result;
END_RCPP
}
// EM_step
List EM_step(arma::mat X, arma::mat mu, arma::mat sigma, int nsim, int niter);
RcppExport SEXP normalmultinomial_EM_step(SEXP XSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nsimSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    __result = Rcpp::wrap(EM_step(X, mu, sigma, nsim, niter));
    return __result;
END_RCPP
}
// EM_step2
List EM_step2(arma::mat X, arma::mat mu, arma::mat sigma, int nsim, int niter);
RcppExport SEXP normalmultinomial_EM_step2(SEXP XSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nsimSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    __result = Rcpp::wrap(EM_step2(X, mu, sigma, nsim, niter));
    return __result;
END_RCPP
}
// EM_step_OMP
List EM_step_OMP(arma::mat X, arma::mat mu, arma::mat sigma, int nsim, int niter, int nthreads);
RcppExport SEXP normalmultinomial_EM_step_OMP(SEXP XSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nsimSEXP, SEXP niterSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    __result = Rcpp::wrap(EM_step_OMP(X, mu, sigma, nsim, niter, nthreads));
    return __result;
END_RCPP
}
// normalmultinomial_fitting
List normalmultinomial_fitting(arma::mat X, int nsim, int niter, double prop, int version, int nthreads);
RcppExport SEXP normalmultinomial_normalmultinomial_fitting(SEXP XSEXP, SEXP nsimSEXP, SEXP niterSEXP, SEXP propSEXP, SEXP versionSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type prop(propSEXP);
    Rcpp::traits::input_parameter< int >::type version(versionSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    __result = Rcpp::wrap(normalmultinomial_fitting(X, nsim, niter, prop, version, nthreads));
    return __result;
END_RCPP
}
